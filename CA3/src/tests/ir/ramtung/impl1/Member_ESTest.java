/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 14 17:45:33 GMT 2024
 */

package ir.ramtung.impl1;

import org.evosuite.runtime.EvoAssertions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Member_ESTest extends Member_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      professor0.name = "HE20.CjQ,t'x ";
      Professor professor1 = new Professor("ir.ramtung.sts01.LibraryException");
      boolean boolean0 = professor0.sameAs(professor1);
      Assert.assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.sts01.LibraryException", "ir.ramtung.sts01.LibraryException");
      student0.name = "";
      boolean boolean0 = student0.isNamed("");
      Assert.assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      professor0.prevPenalty = 449;
      int int0 = professor0.getPrevPenalty();
      Assert.assertEquals(449, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      professor0.prevPenalty = (-1);
      int int0 = professor0.getPrevPenalty();
      Assert.assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Professor professor0 = null;
      try {
        professor0 = new Professor("");
        Assert.fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Empty member name not allowed
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Member", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      professor0.penalize(1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      int int0 = professor0.getPrevPenalty();
      Assert.assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      boolean boolean0 = professor0.sameAs(professor0);
      Assert.assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Professor professor0 = new Professor("ir.ramtung.sts01.LibraryException");
      boolean boolean0 = professor0.isNamed("eVx=w?ln6X,t(`b4{/");
      Assert.assertFalse(boolean0);
  }
}
