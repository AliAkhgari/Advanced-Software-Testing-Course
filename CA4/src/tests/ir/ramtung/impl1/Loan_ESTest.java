/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 14 17:42:26 GMT 2024
 */

package ir.ramtung.impl1;

import org.evosuite.runtime.EvoAssertions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student("[j@ri@jLQ\u0002{el:C-HX", "<49ZHFX(");
      Reference reference0 = new Reference("<49ZHFX(");
      Loan loan0 = new Loan(student0, reference0, 2413);
      loan0.return_((-1104));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student("[j@ri@jLQ\u0002{el:C-HX", "<49ZHFX(");
      Reference reference0 = new Reference("<49ZHFX(");
      Loan loan0 = new Loan(student0, reference0, 2413);
      int int0 = loan0.getPenalty(3718);
      Assert.assertEquals(6437000, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Professor professor0 = new Professor("7TMeGNY#7f-");
      Book book0 = new Book("zl@$}|L~");
      Loan loan0 = new Loan(professor0, book0, 1217);
      int int0 = loan0.getPenalty(265);
      Assert.assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Professor professor0 = new Professor("7TMeGNY#7f-");
      Book book0 = new Book("zl@$}|L~");
      Loan loan0 = new Loan(professor0, book0, 1217);
      loan0.return_(2921);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Student student0 = new Student((String) null, (String) null);
      Reference reference0 = new Reference((String) null);
      Loan loan0 = new Loan(student0, reference0, 1338);
      loan0.dueDate = 2058;
      loan0.return_(2058);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Professor professor0 = new Professor("Data cannot be negative");
      Book book0 = new Book("Data cannot be negative");
      Loan loan0 = new Loan(professor0, book0, 1);
      loan0.extend(10);
      loan0.extend((-1));
      loan0.dueDate = 3452;
      try { 
        loan0.extend(3452);
        Assert.fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Already extended twice
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Professor professor0 = new Professor("Empty member name not allowed");
      Reference reference0 = new Reference("Empty member name not allowed");
      Loan loan0 = new Loan(professor0, reference0, 2);
      try { 
        loan0.extend(2279);
        Assert.fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("[j@ri@jLQ\u0002{el:C-HX", "<49ZHFX(");
      Reference reference0 = new Reference("<49ZHFX(");
      Loan loan0 = new Loan(student0, reference0, 2413);
      try { 
        loan0.extend(2413);
        Assert.fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Student student0 = new Student((String) null, (String) null);
      Reference reference0 = new Reference((String) null);
      Loan loan0 = new Loan(student0, reference0, 1338);
      boolean boolean0 = loan0.isBy(student0);
      Assert.assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student((String) null, (String) null);
      Reference reference0 = new Reference((String) null);
      Loan loan0 = new Loan(student0, reference0, 1338);
      Professor professor0 = new Professor("_g>QR]TUWV2YP");
      boolean boolean0 = loan0.isBy(professor0);
      Assert.assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Student student0 = new Student("'(cMU)|", "'(cMU)|");
      Reference reference0 = new Reference("'(cMU)|");
      Loan loan0 = null;
      try {
        loan0 = new Loan(student0, reference0, (-1898));
        Assert.fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Data cannot be negative
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Professor professor0 = new Professor("IBW5x?49|_");
      Loan loan0 = null;
      try {
        loan0 = new Loan(professor0, (Document) null, (-1));
        Assert.fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student((String) null, (String) null);
      Reference reference0 = new Reference((String) null);
      Loan loan0 = new Loan(student0, reference0, 1338);
      boolean boolean0 = loan0.isFor(reference0);
      Assert.assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Magazine magazine0 = new Magazine("ir.ramtung.impl1.Loan", 1007, 1007);
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, magazine0, (-3806));
        Assert.fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         EvoAssertions.verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
